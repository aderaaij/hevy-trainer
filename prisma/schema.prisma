// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User profile extending Supabase auth.users
model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id") // References auth.users.id
  age              Int?     // Calculated from birthDate, kept for backward compatibility
  birthDate        DateTime? @map("birth_date") // Primary field for age calculation
  weight           Float?   // in kg
  trainingFrequency Int?    // days per week
  focusAreas       String[] // e.g., ["strength", "hypertrophy", "endurance"]
  injuries         String[] // list of current injuries/limitations
  injuryDetails    String?  @map("injury_details") // detailed injury information for AI context
  otherActivities  String?  @map("other_activities") // other sports and activities with frequency
  experienceLevel  String?  // "beginner", "intermediate", "advanced"
  hevyApiKey       String?  @map("hevy_api_key") // Encrypted Hevy API key
  lastHevySync     DateTime? @map("last_hevy_sync") // Last successful Hevy sync
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  importedWorkouts ImportedWorkout[]
  importedRoutines ImportedRoutine[]
  importedRoutineFolders ImportedRoutineFolder[]
  importedExerciseTemplates ImportedExerciseTemplate[]
  generatedRoutines GeneratedRoutine[]
  trainingAnalyses TrainingAnalysis[]
  syncStatus SyncStatus[]

  @@map("user_profiles")
}

// Store imported workouts from Hevy
model ImportedWorkout {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  hevyWorkoutId  String   @unique @map("hevy_workout_id")
  workoutData    Json     @map("workout_data") // Full workout data from Hevy API
  name           String
  performedAt    DateTime @map("performed_at")
  importedAt     DateTime @default(now()) @map("imported_at")
  lastSyncedAt   DateTime @default(now()) @map("last_synced_at")
  
  // Relations
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, performedAt])
  @@index([userId, lastSyncedAt])
  @@map("imported_workouts")
}

// Store AI-generated routines
model GeneratedRoutine {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  name           String
  description    String?
  routineData    Json     @map("routine_data") // Complete routine structure
  aiContext      Json?    @map("ai_context") // Context used for generation
  hevyRoutineId  String?  @map("hevy_routine_id") // ID if exported to Hevy
  exportedToHevy Boolean  @default(false) @map("exported_to_hevy")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("generated_routines")
}

// Store training analyses from the simplified analyzer
model TrainingAnalysis {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  periodStart   DateTime @map("period_start")
  periodEnd     DateTime @map("period_end")
  analysisData  Json     @map("analysis_data") // SimplifiedAnalysis data
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, periodStart])
  @@map("training_analyses")
}

// Store imported routines from Hevy
model ImportedRoutine {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  hevyRoutineId  String   @unique @map("hevy_routine_id")
  routineData    Json     @map("routine_data") // Full routine data from Hevy API
  name           String
  folderId       String?  @map("folder_id") // Hevy folder ID
  isArchived     Boolean  @default(false) @map("is_archived")
  importedAt     DateTime @default(now()) @map("imported_at")
  lastSyncedAt   DateTime @default(now()) @map("last_synced_at")
  
  // Relations
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  folder      ImportedRoutineFolder? @relation(fields: [folderId], references: [hevyFolderId])

  @@index([userId, name])
  @@index([userId, lastSyncedAt])
  @@map("imported_routines")
}

// Store imported routine folders from Hevy
model ImportedRoutineFolder {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  hevyFolderId   String   @unique @map("hevy_folder_id")
  folderData     Json     @map("folder_data") // Full folder data from Hevy API
  name           String
  importedAt     DateTime @default(now()) @map("imported_at")
  lastSyncedAt   DateTime @default(now()) @map("last_synced_at")
  
  // Relations
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  routines    ImportedRoutine[]

  @@index([userId, name])
  @@map("imported_routine_folders")
}

// Store imported exercise templates from Hevy
model ImportedExerciseTemplate {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  hevyExerciseId        String   @unique @map("hevy_exercise_id")
  exerciseTemplateData  Json     @map("exercise_template_data") // Full template data
  name                  String
  muscleGroup           String?  @map("muscle_group")
  exerciseType          String   @map("exercise_type") // barbell, dumbbell, machine, etc.
  isCustom              Boolean  @default(false) @map("is_custom")
  importedAt            DateTime @default(now()) @map("imported_at")
  lastSyncedAt          DateTime @default(now()) @map("last_synced_at")
  
  // Relations
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, name])
  @@index([userId, muscleGroup])
  @@map("imported_exercise_templates")
}

// Track sync status and history
model SyncStatus {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  syncType      String   @map("sync_type") // "workouts", "routines", "exercises", "full"
  status        String   // "pending", "in_progress", "completed", "failed"
  startedAt     DateTime @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")
  itemsSynced   Int      @default(0) @map("items_synced")
  totalItems    Int?     @map("total_items")
  errorMessage  String?  @map("error_message")
  metadata      Json?    // Additional sync metadata
  
  // Relations
  userProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, syncType, startedAt])
  @@map("sync_status")
}
